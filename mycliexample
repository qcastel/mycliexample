#!/bin/bash

export CLI_PATH=$( (readlink "$0" || which "$0") | xargs dirname )

if [ -z "${CLI_TERMINAL_SESSION_ID-}" ]; then
    export CLI_TERMINAL_SESSION_ID=$PPID
fi

export SESSION_INFO_FILE="/tmp/session_info_$CLI_TERMINAL_SESSION_ID.txt"

# Check if the upgrade check has been performed in the current session
if [ ! -e "$SESSION_INFO_FILE" ]; then
    # This is the first time in the session, perform the upgrade check
    touch "$SESSION_INFO_FILE"

    # Function to check for updates and perform the upgrade
    check_for_updates() {
        git -C "$CLI_PATH" fetch origin main > /dev/null 2>&1

        # Check if there are changes to pull
        if [ "$(git -C "$CLI_PATH" rev-list HEAD...origin/main --count)" -gt 0 ]; then
            echo "There are updates available."

            # List the commits that are missing from main without opening a pager
            echo "Commits to be pulled:"
            git -C "$CLI_PATH" --no-pager log --oneline HEAD..origin/main

            echo "Do you want to upgrade? (y/n)"
            read -r response

            if [ "$response" == "y" ]; then
                echo "Pulling updates..."
                git -C "$CLI_PATH" pull origin main
                echo "Upgrade successful!"
            else
                echo "Skipping upgrade."
            fi
        else 
            echo "No upgrade found."
        fi
    }
    echo "Checking for upgrades..."
    # Check for updates before executing the core script
    check_for_updates

    # Set the flag indicating that the upgrade check has been performed
    echo "export MYCLI_UPGRADE_CHECKED=true" >> "$SESSION_INFO_FILE"
fi

# Execute the core script
"$CLI_PATH"/lib/_mycliexample "$@"